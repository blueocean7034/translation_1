// Continuing first pass translation of part_aa into C.
// Addresses 0x00000880 - 0x00000b64

void continue_init_sequence3(void) {
loc_880:
    // 0x00000880: addiu $sp, $sp, -0x20
    sp -= 0x20;
    // 0x00000884: sw $ra, 0x1c($sp)
    *((uint32_t*)(sp + 0x1c)) = ra;
    // 0x00000888: move $t1, $zero
    t1 = 0;
    // 0x0000088c: move $t3, $zero
    t3 = 0;
    // 0x00000890: move $t4, $zero
    t4 = 0;
    // 0x00000894: slti $k0, $t4, 0x40
    k0 = (t4 < 0x40);
    // 0x00000898: beql $k0, $zero, 0x8fc
    if (k0 == 0) goto loc_8fc;
    // 0x0000089c: move $v0, $zero
    v0 = 0;
    // 0x000008a0: jal 0x400090c
    v0 = func_400090c();
    // 0x000008a4: move $a0, $t4
    a0 = t4;
    // 0x000008a8: blezl $v0, 0x8cc
    if (v0 <= 0) goto loc_8cc;
    // 0x000008ac: slti $k0, $t1, 0x50
    k0 = (t1 < 0x50);
    // 0x000008b0: subu $k0, $v0, $t1
    k0 = v0 - t1;
    // 0x000008b4: multu $k0, $t4
    __asm__("multu %0, %1" : : "r"(k0), "r"(t4));
    // 0x000008b8: move $t1, $v0
    t1 = v0;
    // 0x000008bc: mflo $k0
    __asm__("mflo %0" : "=r"(k0));
    // 0x000008c0: addu $t3, $t3, $k0
    t3 += k0;
    // 0x000008c4: nop
    // 0x000008c8: slti $k0, $t1, 0x50
    k0 = (t1 < 0x50);
loc_8cc:
    // 0x000008cc: bnez $k0, 0x894
    if (k0 != 0) goto loc_894;
    // 0x000008d0: addiu $t4, $t4, 1
    t4 += 1;
    // 0x000008d4: sll $a0, $t3, 2
    a0 = t3 << 2;
    // 0x000008d8: subu $a0, $a0, $t3
    a0 -= t3;
    // 0x000008dc: sll $a0, $a0, 2
    a0 <<= 2;
    // 0x000008e0: subu $a0, $a0, $t3
    a0 -= t3;
    // 0x000008e4: sll $a0, $a0, 1
    a0 <<= 1;
    // 0x000008e8: jal 0x4000980
    func_4000980(a0);
    // 0x000008ec: addiu $a0, $a0, -0x370
    a0 += -0x370;
loc_8f0:
    // 0x000008f0: b 0x900
    goto loc_900;
loc_8f4:
    // 0x000008f4: lw $ra, 0x1c($sp)
    ra = *((uint32_t*)(sp + 0x1c));
    // 0x000008f8: move $v0, $zero
    v0 = 0;
loc_8fc:
    // 0x000008fc: lw $ra, 0x1c($sp)
    ra = *((uint32_t*)(sp + 0x1c));
loc_900:
    // 0x00000900: addiu $sp, $sp, 0x20
    sp += 0x20;
    // 0x00000904: jr $ra
    goto *(void*)ra;
    // 0x00000908: nop
}

void func_90c_sequence(void) {
loc_90c:
    // 0x0000090c: addiu $sp, $sp, -0x28
    sp -= 0x28;
    // 0x00000910: sw $ra, 0x1c($sp)
    *((uint32_t*)(sp + 0x1c)) = ra;
    // 0x00000914: move $v0, $zero
    v0 = 0;
    // 0x00000918: jal 0x4000a40
    func_4000a40();
    // 0x0000091c: addiu $a1, $zero, 2
    a1 = 2;
    // 0x00000920: move $fp, $zero
    fp = 0;
    // 0x00000924: addiu $k0, $zero, -1
    k0 = -1;
    // 0x00000928: sw $k0, 4($s4)
    *((uint32_t*)(s4 + 4)) = k0;
    // 0x0000092c: lw $v1, 4($s4)
    v1 = *((uint32_t*)(s4 + 4));
    // 0x00000930: sw $k0, ($s4)
    *((uint32_t*)s4) = k0;
    // 0x00000934: sw $k0, ($s4)
    *((uint32_t*)s4) = k0;
    // 0x00000938: move $gp, $zero
    gp = 0;
    // 0x0000093c: srl $v1, $v1, 0x10
    v1 >>= 16;
    // 0x00000940: andi $k0, $v1, 1
    k0 = v1 & 1;
    // 0x00000944: beql $k0, $zero, 0x954
    if (k0 == 0) goto loc_954;
    // 0x00000948: addiu $gp, $gp, 1
    gp += 1;
    // 0x0000094c: addiu $v0, $v0, 1
    v0 += 1;
    // 0x00000950: addiu $gp, $gp, 1
    gp += 1;
loc_954:
    // 0x00000954: slti $k0, $gp, 8
    k0 = (gp < 8);
    // 0x00000958: bnez $k0, 0x940
    if (k0 != 0) goto loc_940;
    // 0x0000095c: srl $v1, $v1, 1
    v1 >>= 1;
loc_960:
    // 0x00000960: addiu $fp, $fp, 1
    fp += 1;
    // 0x00000964: slti $k0, $fp, 0xa
    k0 = (fp < 10);
    // 0x00000968: bnel $k0, $zero, 0x928
    if (k0 != 0) goto loc_928;
    // 0x0000096c: addiu $k0, $zero, -1
    k0 = -1;
loc_970:
    // 0x00000970: lw $ra, 0x1c($sp)
    ra = *((uint32_t*)(sp + 0x1c));
    // 0x00000974: addiu $sp, $sp, 0x28
    sp += 0x28;
    // 0x00000978: jr $ra
    goto *(void*)ra;
    // 0x0000097c: nop
}

void func_980_sequence(void) {
loc_980:
    // 0x00000980: addiu $sp, $sp, -0x28
    sp -= 0x28;
    // 0x00000984: sw $ra, 0x1c($sp)
    *((uint32_t*)(sp + 0x1c)) = ra;
    // 0x00000988: sw $a0, 0x20($sp)
    *((uint32_t*)(sp + 0x20)) = a0;
    // 0x0000098c: sb $zero, 0x27($sp)
    *((uint8_t*)(sp + 0x27)) = 0;
    // 0x00000990: move $t0, $zero
    t0 = 0;
    // 0x00000994: move $t2, $zero
    t2 = 0;
    // 0x00000998: ori $t5, $zero, 0xc800
    t5 = 0xc800;
    // 0x0000099c: move $t6, $zero
    t6 = 0;
loc_9a0:
    // 0x000009a0: slti $k0, $t6, 0x40
    k0 = (t6 < 0x40);
    // 0x000009a4: bnel $k0, $zero, 0x9b8
    if (k0 != 0) goto loc_9b8;
    // 0x000009a8: move $a0, $t6
    a0 = t6;
    // 0x000009ac: b 0xa30
    goto loc_a30;
loc_9b0:
    // 0x000009b0: move $v0, $zero
    v0 = 0;
    // 0x000009b4: move $a0, $t6
    a0 = t6;
loc_9b8:
    // 0x000009b8: jal 0x4000a40
    func_4000a40(a0, a1);
    // 0x000009bc: addiu $a1, $zero, 1
    a1 = 1;
    // 0x000009c0: jal 0x4000ad0
    func_4000ad0();
    // 0x000009c4: addiu $a0, $sp, 0x27
    a0 = sp + 0x27;
    // 0x000009c8: jal 0x4000ad0
    func_4000ad0();
    // 0x000009cc: addiu $a0, $sp, 0x27
    a0 = sp + 0x27;
    // 0x000009d0: lbu $k0, 0x27($sp)
    k0 = *((uint8_t*)(sp + 0x27));
    // 0x000009d4: addiu $k1, $zero, 0x320
    k1 = 0x320;
    // 0x000009d8: lw $a0, 0x20($sp)
    a0 = *((uint32_t*)(sp + 0x20));
    // 0x000009dc: multu $k0, $k1
    __asm__("multu %0, %1" : : "r"(k0), "r"(k1));
    // 0x000009e0: mflo $t0
    __asm__("mflo %0" : "=r"(t0));
    // 0x000009e4: subu $k0, $t0, $a0
    k0 = t0 - a0;
    // 0x000009e8: bgezl $k0, 0x9f8
    if (k0 >= 0) goto loc_9f8;
    // 0x000009ec: slt $k1, $k0, $t5
    k1 = (k0 < t5);
    // 0x000009f0: subu $k0, $a0, $t0
    k0 = a0 - t0;
    // 0x000009f4: slt $k1, $k0, $t5
    k1 = (k0 < t5);
loc_9f8:
    // 0x000009f8: beql $k1, $zero, 0xa0c
    if (k1 == 0) goto loc_a0c;
    // 0x000009fc: lw $a0, 0x20($sp)
    a0 = *((uint32_t*)(sp + 0x20));
    // 0x00000a00: move $t5, $k0
    t5 = k0;
    // 0x00000a04: move $t2, $t6
    t2 = t6;
    // 0x00000a08: lw $a0, 0x20($sp)
    a0 = *((uint32_t*)(sp + 0x20));
loc_a0c:
    // 0x00000a0c: slt $k1, $t0, $a0
    k1 = (t0 < a0);
    // 0x00000a10: beql $k1, $zero, 0xa2c
    if (k1 == 0) goto loc_a2c;
    // 0x00000a14: addu $v0, $t2, $t6
    v0 = t2 + t6;
    // 0x00000a18: addiu $t6, $t6, 1
    t6 += 1;
    // 0x00000a1c: slti $k1, $t6, 0x41
    k1 = (t6 < 0x41);
    // 0x00000a20: bnel $k1, $zero, 0x9a4
    if (k1 != 0) goto loc_9a4;
    // 0x00000a24: slti $k0, $t6, 0x40
    k0 = (t6 < 0x40);
    // 0x00000a28: addu $v0, $t2, $t6
    v0 = t2 + t6;
loc_a2c:
    // 0x00000a2c: srl $v0, $v0, 1
    v0 >>= 1;
loc_a30:
    // 0x00000a30: lw $ra, 0x1c($sp)
    ra = *((uint32_t*)(sp + 0x1c));
    // 0x00000a34: addiu $sp, $sp, 0x28
    sp += 0x28;
    // 0x00000a38: jr $ra
    goto *(void*)ra;
    // 0x00000a3c: nop
}

void func_a40_sequence(void) {
loc_a40:
    // 0x00000a40: addiu $sp, $sp, -0x28
    sp -= 0x28;
    // 0x00000a44: andi $a0, $a0, 0xff
    a0 &= 0xff;
    // 0x00000a48: addiu $k1, $zero, 1
    k1 = 1;
    // 0x00000a4c: xori $a0, $a0, 0x3f
    a0 ^= 0x3f;
    // 0x00000a50: sw $ra, 0x1c($sp)
    *((uint32_t*)(sp + 0x1c)) = ra;
    // 0x00000a54: bne $a1, $k1, 0xa64
    if (a1 != k1) goto loc_a64;
    // 0x00000a58: lui $t7, 0x4600
    t7 = 0x46000000;
    // 0x00000a5c: lui $k0, 0x8000
    k0 = 0x80000000;
    // 0x00000a60: or $t7, $t7, $k0
    t7 |= k0;
loc_a64:
    // 0x00000a64: andi $k0, $a0, 1
    k0 = a0 & 1;
    // 0x00000a68: sll $k0, $k0, 6
    k0 <<= 6;
    // 0x00000a6c: or $t7, $t7, $k0
    t7 |= k0;
    // 0x00000a70: andi $k0, $a0, 2
    k0 = a0 & 2;
    // 0x00000a74: sll $k0, $k0, 0xd
    k0 <<= 13;
    // 0x00000a78: or $t7, $t7, $k0
    t7 |= k0;
    // 0x00000a7c: andi $k0, $a0, 4
    k0 = a0 & 4;
    // 0x00000a80: sll $k0, $k0, 0x14
    k0 <<= 20;
    // 0x00000a84: or $t7, $t7, $k0
    t7 |= k0;
    // 0x00000a88: andi $k0, $a0, 8
    k0 = a0 & 8;
    // 0x00000a8c: sll $k0, $k0, 4
    k0 <<= 4;
    // 0x00000a90: or $t7, $t7, $k0
    t7 |= k0;
    // 0x00000a94: andi $k0, $a0, 0x10
    k0 = a0 & 0x10;
    // 0x00000a98: sll $k0, $k0, 0xb
    k0 <<= 11;
    // 0x00000a9c: or $t7, $t7, $k0
    t7 |= k0;
    // 0x00000aa0: andi $k0, $a0, 0x20
    k0 = a0 & 0x20;
    // 0x00000aa4: sll $k0, $k0, 0x12
    k0 <<= 18;
    // 0x00000aa8: or $t7, $t7, $k0
    t7 |= k0;
    // 0x00000aac: addiu $k1, $zero, 1
    k1 = 1;
    // 0x00000ab0: bne $a1, $k1, 0xac0
    if (a1 != k1) goto loc_ac0;
    // 0x00000ab4: sw $t7, ($s5)
    *((uint32_t*)s5) = t7;
    // 0x00000ab8: lui $k0, 0xa430
    k0 = 0xa4300000;
    // 0x00000abc: sw $zero, ($k0)
    *((uint32_t*)k0) = 0;
loc_ac0:
    // 0x00000ac0: lw $ra, 0x1c($sp)
    ra = *((uint32_t*)(sp + 0x1c));
    // 0x00000ac4: addiu $sp, $sp, 0x28
    sp += 0x28;
    // 0x00000ac8: jr $ra
    goto *(void*)ra;
    // 0x00000acc: nop
}

void func_ad0_sequence(void) {
loc_ad0:
    // 0x00000ad0: addiu $sp, $sp, -0x28
    sp -= 0x28;
    // 0x00000ad4: sw $ra, 0x1c($sp)
    *((uint32_t*)(sp + 0x1c)) = ra;
    // 0x00000ad8: addiu $k0, $zero, 0x2000
    k0 = 0x2000;
    // 0x00000adc: lui $k1, 0xa430
    k1 = 0xa4300000;
    // 0x00000ae0: sw $k0, ($k1)
    *((uint32_t*)k1) = k0;
    // 0x00000ae4: move $fp, $zero
    fp = 0;
    // 0x00000ae8: lw $fp, ($s5)
    fp = *((uint32_t*)s5);
    // 0x00000aec: addiu $k0, $zero, 0x1000
    k0 = 0x1000;
    // 0x00000af0: sw $k0, ($k1)
    *((uint32_t*)k1) = k0;
    // 0x00000af4: addiu $k1, $zero, 0x40
    k1 = 0x40;
    // 0x00000af8: and $k1, $k1, $fp
    k1 &= fp;
    // 0x00000afc: srl $k1, $k1, 6
    k1 >>= 6;
    // 0x00000b00: move $k0, $zero
    k0 = 0;
    // 0x00000b04: or $k0, $k0, $k1
    k0 |= k1;
    // 0x00000b08: addiu $k1, $zero, 0x4000
    k1 = 0x4000;
    // 0x00000b0c: and $k1, $k1, $fp
    k1 &= fp;
    // 0x00000b10: srl $k1, $k1, 0xd
    k1 >>= 13;
    // 0x00000b14: or $k0, $k0, $k1
    k0 |= k1;
    // 0x00000b18: lui $k1, 0x40
    k1 = 0x40 << 16;
    // 0x00000b1c: and $k1, $k1, $fp
    k1 &= fp;
    // 0x00000b20: srl $k1, $k1, 0x14
    k1 >>= 20;
    // 0x00000b24: or $k0, $k0, $k1
    k0 |= k1;
    // 0x00000b28: addiu $k1, $zero, 0x80
    k1 = 0x80;
    // 0x00000b2c: and $k1, $k1, $fp
    k1 &= fp;
    // 0x00000b30: srl $k1, $k1, 4
    k1 >>= 4;
    // 0x00000b34: or $k0, $k0, $k1
    k0 |= k1;
    // 0x00000b38: ori $k1, $zero, 0x8000
    k1 = 0x8000;
    // 0x00000b3c: and $k1, $k1, $fp
    k1 &= fp;
    // 0x00000b40: srl $k1, $k1, 0xb
    k1 >>= 11;
    // 0x00000b44: or $k0, $k0, $k1
    k0 |= k1;
    // 0x00000b48: lui $k1, 0x80
    k1 = 0x80 << 16;
    // 0x00000b4c: and $k1, $k1, $fp
    k1 &= fp;
    // 0x00000b50: srl $k1, $k1, 0x12
    k1 >>= 18;
    // 0x00000b54: or $k0, $k0, $k1
    k0 |= k1;
    // 0x00000b58: sb $k0, ($a0)
    *((uint8_t*)a0) = k0;
    // 0x00000b5c: lw $ra, 0x1c($sp)
    ra = *((uint32_t*)(sp + 0x1c));
    // 0x00000b60: addiu $sp, $sp, 0x28
    sp += 0x28;
    // 0x00000b64: jr $ra
    goto *(void*)ra;
}
