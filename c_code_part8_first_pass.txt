// Continuing first pass translation of part_aa into C.
// Addresses 0x000015f8 - 0x00001810

void func_15f8_sequence(void) {
loc_15f8:
    // 0x000015f8: addiu $sp, $sp, -0x18
    sp -= 0x18;
    // 0x000015fc: andi $t6, $a0, 0xf
    t6 = a0 & 0xf;
    // 0x00001600: bnez $t6, 0x1678
    if (t6 != 0) goto loc_1678;
    // 0x00001604: sw $ra, 0x14($sp)
    *((uint32_t*)(sp + 0x14)) = ra;
    // 0x00001608: lui $t7, 0x8002
    t7 = 0x8002 << 16;
    // 0x0000160c: lw $t7, 0x309c($t7)
    t7 = *((uint32_t*)(t7 + 0x309c));
    // 0x00001610: lui $t8, 0x8002
    t8 = 0x8002 << 16;
    // 0x00001614: lui $t9, 0x8002
    t9 = 0x8002 << 16;
    // 0x00001618: beqz $t7, 0x162c
    if (t7 == 0) goto loc_162c;
    // 0x0000161c: nop
    ;
    // 0x00001620: lw $t8, 0x3098($t8)
    t8 = *((uint32_t*)(t8 + 0x3098));
    // 0x00001624: bnez $t8, 0x1638
    if (t8 != 0) goto loc_1638;
    // 0x00001628: nop
    ;
loc_162c:
    // 0x0000162c: lw $t9, 0x3094($t9)
    t9 = *((uint32_t*)(t9 + 0x3094));
    // 0x00001630: beql $t9, $zero, 0x167c
    if (t9 == 0) goto loc_167c;
    // 0x00001634: lw $ra, 0x14($sp)
    ra = *((uint32_t*)(sp + 0x14));
loc_1638:
    // 0x00001638: jal 0xd8e0
    func_d8e0();
    // 0x0000163c: nop
    ;
    // 0x00001640: lui $t1, 0x8002
    t1 = 0x8002 << 16;
    // 0x00001644: lw $t1, 0x30a4($t1)
    t1 = *((uint32_t*)(t1 + 0x30a4));
    // 0x00001648: lui $t0, 0x8002
    t0 = 0x8002 << 16;
    // 0x0000164c: lw $t0, 0x30a0($t0)
    t0 = *((uint32_t*)(t0 + 0x30a0));
    // 0x00001650: subu $t2, $v0, $t1
    t2 = v0 - t1;
    // 0x00001654: lui $a0, 0x803b
    a0 = 0x803b << 16;
    // 0x00001658: sltu $at, $t0, $t2
    at = (t0 < t2) ? 1 : 0;
    // 0x0000165c: beql $at, $zero, 0x167c
    if (at == 0) goto loc_167c;
    // 0x00001660: lw $ra, 0x14($sp)
    ra = *((uint32_t*)(sp + 0x14));
    // 0x00001664: jal 0x59d0
    func_59d0();
    // 0x00001668: addiu $a0, $a0, 0x5000
    a0 += 0x5000;
    // 0x0000166c: lui $a0, 0x803e
    a0 = 0x803e << 16;
    // 0x00001670: jal 0x59d0
    func_59d0();
    // 0x00001674: addiu $a0, $a0, -0x5800
    a0 += -0x5800;
loc_1678:
    // 0x00001678: lw $ra, 0x14($sp)
    ra = *((uint32_t*)(sp + 0x14));
loc_167c:
    // 0x0000167c: addiu $sp, $sp, 0x18
    sp += 0x18;
    // 0x00001680: jr $ra
    goto *(void*)ra;
}

void func_1688_sequence(void) {
    // 0x00001688: addiu $sp, $sp, -0x18
    sp -= 0x18;
    // 0x0000168c: sw $ra, 0x14($sp)
    *((uint32_t*)(sp + 0x14)) = ra;
    // 0x00001690: jal 0xd8e0
    func_d8e0();
    // 0x00001694: nop
    ;
    // 0x00001698: lw $ra, 0x14($sp)
    ra = *((uint32_t*)(sp + 0x14));
    // 0x0000169c: lui $at, 0x8002
    at = 0x8002 << 16;
    // 0x000016a0: sw $v0, 0x30a4($at)
    *((uint32_t*)(at + 0x30a4)) = v0;
    // 0x000016a4: jr $ra
    goto *(void*)ra;
    // 0x000016a8: addiu $sp, $sp, 0x18
    sp += 0x18;
}

void func_16ac_sequence(void) {
loc_16ac:
    // 0x000016ac: addiu $sp, $sp, -0x28
    sp -= 0x28;
    // 0x000016b0: sw $ra, 0x24($sp)
    *((uint32_t*)(sp + 0x24)) = ra;
    // 0x000016b4: sw $s1, 0x20($sp)
    *((uint32_t*)(sp + 0x20)) = s1;
    // 0x000016b8: sw $s0, 0x1c($sp)
    *((uint32_t*)(sp + 0x1c)) = s0;
    // 0x000016bc: sw $a1, 0x2c($sp)
    *((uint32_t*)(sp + 0x2c)) = a1;
    // 0x000016c0: sw $a2, 0x30($sp)
    *((uint32_t*)(sp + 0x30)) = a2;
    // 0x000016c4: sw $a3, 0x34($sp)
    *((uint32_t*)(sp + 0x34)) = a3;
    // 0x000016c8: addiu $t6, $zero, 1
    t6 = 1;
    // 0x000016cc: addiu $t7, $zero, 5
    t7 = 5;
    // 0x000016d0: sw $zero, 0xc8($a0)
    *((uint32_t*)(a0 + 0xc8)) = 0;
    // 0x000016d4: sw $zero, 0xcc($a0)
    *((uint32_t*)(a0 + 0xcc)) = 0;
    // 0x000016d8: sw $zero, 0xb4($a0)
    *((uint32_t*)(a0 + 0xb4)) = 0;
    // 0x000016dc: sw $zero, 0xd0($a0)
    *((uint32_t*)(a0 + 0xd0)) = 0;
    // 0x000016e0: sw $zero, 0xb8($a0)
    *((uint32_t*)(a0 + 0xb8)) = 0;
    // 0x000016e4: sw $zero, 0xbc($a0)
    *((uint32_t*)(a0 + 0xbc)) = 0;
    // 0x000016e8: sw $zero, 0xc0($a0)
    *((uint32_t*)(a0 + 0xc0)) = 0;
    // 0x000016ec: sw $zero, 0xc4($a0)
    *((uint32_t*)(a0 + 0xc4)) = 0;
    // 0x000016f0: sh $t6, ($a0)
    *((uint16_t*)a0) = t6;
    // 0x000016f4: sh $t7, 0x20($a0)
    *((uint16_t*)(a0 + 0x20)) = t7;
    // 0x000016f8: lw $t8, 0x2c($sp)
    t8 = *((uint32_t*)(sp + 0x2c));
    // 0x000016fc: move $s0, $a0
    s0 = a0;
    // 0x00001700: addiu $s1, $a0, 0x40
    s1 = a0 + 0x40;
    // 0x00001704: sw $t8, 0xb0($a0)
    *((uint32_t*)(a0 + 0xb0)) = t8;
    // 0x00001708: move $a0, $s1
    a0 = s1;
    // 0x0000170c: addiu $a1, $s0, 0x58
    a1 = s0 + 0x58;
    // 0x00001710: jal 0xd6d0
    func_d6d0();
    // 0x00001714: addiu $a2, $zero, 8
    a2 = 8;
    // 0x00001718: addiu $a0, $s0, 0x78
    a0 = s0 + 0x78;
    // 0x0000171c: addiu $a1, $s0, 0x90
    a1 = s0 + 0x90;
    // 0x00001720: jal 0xd6d0
    func_d6d0();
    // 0x00001724: addiu $a2, $zero, 8
    a2 = 8;
    // 0x00001728: jal 0xd8f0
    func_d8f0();
    // 0x0000172c: addiu $a0, $zero, 0xfe
    a0 = 0xfe;
    // 0x00001730: lbu $t9, 0x33($sp)
    t9 = *((uint8_t*)(sp + 0x33));
    // 0x00001734: lui $t1, 0x8002
    t1 = 0x8002 << 16;
    // 0x00001738: lui $v1, 0x8006
    v1 = 0x8006 << 16;
    // 0x0000173c: sll $t0, $t9, 2
    t0 = t9 << 2;
    // 0x00001740: addu $t0, $t0, $t9
    t0 = t0 + t9;
    // 0x00001744: sll $t0, $t0, 4
    t0 <<= 4;
    // 0x00001748: addiu $t1, $t1, 0x69c0
    t1 += 0x69c0;
    // 0x0000174c: addiu $v1, $v1, 0x87c
    v1 += 0x87c;
    // 0x00001750: addu $t2, $t0, $t1
    t2 = t0 + t1;
    // 0x00001754: sw $t2, ($v1)
    *((uint32_t*)v1) = t2;
    // 0x00001758: lw $t3, 0x1c($t2)
    t3 = *((uint32_t*)(t2 + 0x1c));
    // 0x0000175c: lui $at, 0x8006
    at = 0x8006 << 16;
    // 0x00001760: addiu $a0, $zero, 4
    a0 = 4;
    // 0x00001764: sw $t3, 0x880($at)
    *((uint32_t*)(at + 0x880)) = t3;
    // 0x00001768: lw $t4, 0x30($t2)
    t4 = *((uint32_t*)(t2 + 0x30));
    // 0x0000176c: lui $at, 0x8006
    at = 0x8006 << 16;
    // 0x00001770: move $a1, $s1
    a1 = s1;
    // 0x00001774: sw $t4, 0x884($at)
    *((uint32_t*)(at + 0x884)) = t4;
    // 0x00001778: lw $t5, 0x44($t2)
    t5 = *((uint32_t*)(t2 + 0x44));
    // 0x0000177c: lui $at, 0x8006
    at = 0x8006 << 16;
    // 0x00001780: addiu $a2, $zero, 0x29b
    a2 = 0x29b;
    // 0x00001784: jal 0xdc50
    func_dc50();
    // 0x00001788: sw $t5, 0x888($at)
    *((uint32_t*)(at + 0x888)) = t5;
    // 0x0000178c: addiu $a0, $zero, 9
    a0 = 9;
    // 0x00001790: move $a1, $s1
    a1 = s1;
    // 0x00001794: jal 0xdc50
    func_dc50();
    // 0x00001798: addiu $a2, $zero, 0x29c
    a2 = 0x29c;
    // 0x0000179c: addiu $a0, $zero, 0xe
    a0 = 0xe;
    // 0x000017a0: move $a1, $s1
    a1 = s1;
    // 0x000017a4: jal 0xdc50
    func_dc50();
    // 0x000017a8: addiu $a2, $zero, 0x29d
    a2 = 0x29d;
    // 0x000017ac: move $a0, $s1
    a0 = s1;
    // 0x000017b0: addiu $a1, $zero, 0x29a
    a1 = 0x29a;
    // 0x000017b4: jal 0xdcc0
    func_dcc0();
    // 0x000017b8: lw $a2, 0x34($sp)
    a2 = *((uint32_t*)(sp + 0x34));
    // 0x000017bc: jal 0xa88
    func_a88();
    // 0x000017c0: nop
    ;
    // 0x000017c4: lui $a0, 0x803b
    a0 = 0x803b << 16;
    // 0x000017c8: addiu $a0, $a0, -0x48b0
    a0 += -0x48b0;
    // 0x000017cc: jal 0x6f0
    func_6f0();
    // 0x000017d0: addiu $a1, $zero, 0x200
    a1 = 0x200;
    // 0x000017d4: lw $a0, 0xb0($s0)
    a0 = *((uint32_t*)(s0 + 0xb0));
    // 0x000017d8: lui $a2, 0x7000
    a2 = 0x7000 << 16;
    // 0x000017dc: addiu $t6, $zero, 0x1e
    t6 = 0x1e;
    // 0x000017e0: sw $t6, 0x14($sp)
    *((uint32_t*)(sp + 0x14)) = t6;
    // 0x000017e4: addiu $a2, $a2, 0xd00
    a2 += 0xd00;
    // 0x000017e8: sw $v0, 0x10($sp)
    *((uint32_t*)(sp + 0x10)) = v0;
    // 0x000017ec: addiu $a1, $zero, 2
    a1 = 2;
    // 0x000017f0: jal 0xd430
    func_d430();
    // 0x000017f4: move $a3, $s0
    a3 = s0;
    // 0x000017f8: jal 0xd580
    func_d580();
    // 0x000017fc: lw $a0, 0xb0($s0)
    a0 = *((uint32_t*)(s0 + 0xb0));
    // 0x00001800: lw $ra, 0x24($sp)
    ra = *((uint32_t*)(sp + 0x24));
    // 0x00001804: lw $s0, 0x1c($sp)
    s0 = *((uint32_t*)(sp + 0x1c));
    // 0x00001808: lw $s1, 0x20($sp)
    s1 = *((uint32_t*)(sp + 0x20));
    // 0x0000180c: jr $ra
    goto *(void*)ra;
    // 0x00001810: addiu $sp, $sp, 0x28
    sp += 0x28;
}
